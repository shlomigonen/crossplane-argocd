apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: aws-eks
  labels:
    provider: aws
spec:
  compositeTypeRef:
    apiVersion: eks.aws.unnefer.com/v1alpha1
    kind: XEKSCluster
  
  writeConnectionSecretsToNamespace: crossplane-system

  patchSets:
  - name: clusterconfig
    patches:
    - fromFieldPath: spec.parameters.region
      toFieldPath: spec.forProvider.region

  resources:
    ### Cluster Configuration
    - name: eksCluster
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: Cluster
        metadata:
          annotations:
            meta.upbound.io/example-id: eks/v1beta1/cluster
            uptest.upbound.io/timeout: "2400"
        spec:
          forProvider:
            roleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: clusterRole
            vpcConfig:
              - endpointPrivateAccess: true
                endpointPublicAccess: true
      patches:
        - type: PatchSet
          patchSetName: clusterconfig
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        # Using the XNetworking defined securityGroupClusterIds & subnetIds for the vpcConfig
        - fromFieldPath: spec.parameters.securityGroupClusterIds
          toFieldPath: spec.forProvider.vpcConfig[0].securityGroupIds
        - fromFieldPath: spec.parameters.subnetIds
          toFieldPath: spec.forProvider.vpcConfig[0].subnetIds

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.status
          toFieldPath: status.clusterStatus    
      readinessChecks:
        - type: MatchString
          fieldPath: status.atProvider.status
          matchString: ACTIVE

    - name: kubernetesClusterAuth
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: ClusterAuth
        spec:
          forProvider:
            clusterNameSelector:
              matchControllerRef: true
      patches:
        - type: PatchSet
          patchSetName: clusterconfig
        - fromFieldPath: spec.writeConnectionSecretToRef.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-access"
      connectionDetails:
        - fromConnectionSecretKey: kubeconfig

    ### Cluster Role and Policies
    - name: clusterRole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: clusterRole
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "eks.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      
    
    - name: clusterRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: clusterRole


    ### NodeGroup Configuration
    - name: nodeGroupPublic
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: NodeGroup
        spec:
          forProvider:
            clusterNameSelector:
              matchControllerRef: true
            nodeRoleArnSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
            subnetIdSelector:
              matchLabels:
                access: public
            scalingConfig:
              - minSize: 1
                maxSize: 10
                desiredSize: 1
            instanceTypes: # TODO: we can support to have that parameterized also
              - t3.medium
      patches:
        - type: PatchSet
          patchSetName: clusterconfig
        - fromFieldPath: spec.parameters.nodes.count
          toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.subnetIdSelector.matchLabels[net.aws.unnefer.com/network-id]
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.status
          toFieldPath: status.nodePoolStatus  
      readinessChecks:
      - type: MatchString
        fieldPath: status.atProvider.status
        matchString: ACTIVE

    ### Node Role and Policies
    - name: nodegroupRole
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: Role
        metadata:
          labels:
            role: nodegroup
        spec:
          forProvider:
            assumeRolePolicy: |
              {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
              }
      

    - name: workerNodeRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      

    - name: cniRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup
      
    - name: containerRegistryRolePolicyAttachment
      base:
        apiVersion: iam.aws.upbound.io/v1beta1
        kind: RolePolicyAttachment
        spec:
          forProvider:
            policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
            roleSelector:
              matchControllerRef: true
              matchLabels:
                role: nodegroup

    - name: kubernetes
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
              namespace: crossplane-system
      patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
      #- fromFieldPath: spec.writeConnectionSecretToRef.namespace
      #  toFieldPath: spec.credentials.secretRef.namespace
      - fromFieldPath: spec.id
        toFieldPath: spec.credentials.secretRef.name
        transforms:
        - type: string
          string:
            fmt: '%s-access'
      readinessChecks:
      - type: None  

    - name: get-ingress-controller-service
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        annotations:
          crossplane.io/external-name: demo-env-eks-ingress-ingress-nginx-controller
        spec:
          deletionPolicy: Orphan
          forProvider:
            manifest:
              apiVersion: v1
              kind: Service
              spec:
                deletionPolicy: Orphan
              metadata:
                namespace: ingress-nginx
                name: demo-env-eks-ingress-ingress-nginx-controller
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - type: string
            string:
              fmt: '%s-ingress-controller-service'  
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.manifest.status.loadBalancer.ingress[0].hostname
          toFieldPath: status.loadBalancerHostname
#      readinessChecks:
#      - type: MatchString
#        fieldPath: status.atProvider.status
#        matchString: ACTIVE    
      
    - name: helm
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: Secret
            secretRef:
              key: kubeconfig
              namespace: crossplane-system
      patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
      #- fromFieldPath: spec.writeConnectionSecretToRef.namespace
      #  toFieldPath: spec.credentials.secretRef.namespace        
      - fromFieldPath: spec.id
        toFieldPath: spec.credentials.secretRef.name
        transforms:
        - type: string
          string:
            fmt: "%s-access"        
      readinessChecks:
      - type: None
      
    - name: ingress
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: ingress-nginx
            chart:
              name: ingress-nginx
              repository: https://kubernetes.github.io/ingress-nginx
              version: 4.2.0
            values:
              controller:
                ingressClassResource:
                  default: true
                annotations:
                  service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
                  service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
                  service.beta.kubernetes.io/aws-load-balancer-type: nlb
      patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
        - type: string
          string:
            fmt: '%s-ingress'
      - fromFieldPath: spec.id
        toFieldPath: spec.providerConfigRef.name

    - name: cert-manager
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          rollbackLimit: 3
          forProvider:
            namespace: cert-manager
            chart:
              name: cert-manager
              repository: https://charts.jetstack.io
              version: v1.17.1
            set:
              - name: installCRDs
                value: "true"  
      patches:
      - fromFieldPath: spec.id
        toFieldPath: metadata.name
        transforms:
        - type: string
          string:
            fmt: '%s-cert-manager'
      - fromFieldPath: spec.id
        toFieldPath: spec.providerConfigRef.name    

    - name: clusterAuth-uses-cluster
      base:
        apiVersion: apiextensions.crossplane.io/v1alpha1
        kind: Usage
        metadata:
          name: clusterAuth-uses-cluster
        spec:
          replayDeletion: true
          of:
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: Cluster
            resourceSelector:
              matchControllerRef: true
          by:
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: ClusterAuth
            resourceSelector:
              matchControllerRef: true

    - name: release-uses-clusterAuth
      base:
        apiVersion: apiextensions.crossplane.io/v1alpha1
        kind: Usage
        metadata:
          name: release-uses-clusterAuth
        spec:
          replayDeletion: true
          of:
            apiVersion: eks.aws.upbound.io/v1beta1
            kind: ClusterAuth
            resourceSelector:
              matchControllerRef: true
          by:
            apiVersion: helm.crossplane.io/v1beta1
            kind: Release
            resourceSelector:
              matchControllerRef: true

#    - name: object-uses-clusterAuth
#      base:
#        apiVersion: apiextensions.crossplane.io/v1alpha1
#        kind: Usage
#        metadata:
#          name: object-uses-clusterAuth
#        spec:
#          replayDeletion: true
#          of:
#            apiVersion: eks.aws.upbound.io/v1beta1
#            kind: ClusterAuth
#            resourceSelector:
#              matchControllerRef: true
#          by:
#            apiVersion: kubernetes.crossplane.io/v1alpha1
#            kind: Object
#            resourceSelector:
#              matchControllerRef: true          

#    - name: acm-certificate-us
#      base:
#        apiVersion: acm.aws.upbound.io/v1beta1
#        kind: Certificate
#        metadata:
#          labels:
#            resource: Certificate
#        spec:
#          forProvider:
#            validationMethod: DNS
#      patches:
#      - fromFieldPath: spec.parameters.region
#        toFieldPath: spec.forProvider.region
#      - fromFieldPath: spec.parameters.domain.name
#        toFieldPath: spec.forProvider.domainName
#      - fromFieldPath: status.atProvider.arn
#        toFieldPath: status.certificate.arn
#        type: ToCompositeFieldPath
#      - fromFieldPath: status.atProvider.domainValidationOptions
#        toFieldPath: status.certificate.domainValidationOptions
#        type: ToCompositeFieldPath
    
    - name: a-record-cdn
      base:
        apiVersion: route53.aws.upbound.io/v1beta1
        kind: Record
        metadata:
          labels:
            resource: Record
            type: A
        spec:
          forProvider:
            alias:
            - evaluateTargetHealth: false
              # TBD: This Zone ID is for eu-central-1. We need to find a more generic solution. It could be only the specifing the Region is good enough
              zoneId: Z215JYRZR1TBD5
            type: A
      patches:
      - fromFieldPath: spec.parameters.region
        toFieldPath: spec.forProvider.region
      - fromFieldPath: spec.parameters.domain.zoneId
        toFieldPath: spec.forProvider.zoneId
      - fromFieldPath: spec.parameters.domain.name
        toFieldPath: spec.forProvider.name  
      - fromFieldPath: status.loadBalancerHostname
        toFieldPath: spec.forProvider.alias[0].name
        transforms:
        - type: string
          string:
            fmt: 'dualstack.%s'

#    - name: cname-validation-record
#      base:
#        apiVersion: route53.aws.upbound.io/v1beta1
#        kind: Record
#        metadata:
#          labels:
#            resource: Record
#            type: CNAME
#        spec:
#          forProvider:
#            ttl: 300
#      patches:
#      - fromFieldPath: spec.parameters.region
#        toFieldPath: spec.forProvider.region
#      - fromFieldPath: spec.parameters.domain.zoneId
#        toFieldPath: spec.forProvider.zoneId
#      - fromFieldPath: status.certificate.domainValidationOptions[0].resourceRecordName
#        policy:
#          fromFieldPath: Required
#        toFieldPath: spec.forProvider.name
#      - fromFieldPath: status.certificate.domainValidationOptions[0].resourceRecordValue
#        policy:
#          fromFieldPath: Required
#        toFieldPath: spec.forProvider.records[0]
#      - fromFieldPath: status.certificate.domainValidationOptions[0].resourceRecordType
#        policy:
#          fromFieldPath: Required
#        toFieldPath: spec.forProvider.type        
          
